
# 1 "C:\Users\Phang\Desktop\9.80\PR 29\PR29.c"

# 19 "C:\Program Files\HI-TECH Software\include\pic168xa.h"
volatile unsigned char INDF @ 0x00;
volatile unsigned char TMR0 @ 0x01;
volatile unsigned char PCL @ 0x02;
volatile unsigned char STATUS @ 0x03;
volatile unsigned char FSR @ 0x04;
volatile unsigned char PORTA @ 0x05;
volatile unsigned char PORTB @ 0x06;
volatile unsigned char PORTC @ 0x07;

# 31
volatile unsigned char PCLATH @ 0x0A;
volatile unsigned char INTCON @ 0x0B;
volatile unsigned char PIR1 @ 0x0C;
volatile unsigned char PIR2 @ 0x0D;
volatile unsigned char TMR1L @ 0x0E;
volatile unsigned char TMR1H @ 0x0F;
volatile unsigned char T1CON @ 0x10;
volatile unsigned char TMR2 @ 0x11;
volatile unsigned char T2CON @ 0x12;
volatile unsigned char SSPBUF @ 0x13;
volatile unsigned char SSPCON @ 0x14;
volatile unsigned char CCPR1L @ 0x15;
volatile unsigned char CCPR1H @ 0x16;
volatile unsigned char CCP1CON @ 0x17;
volatile unsigned char RCSTA @ 0x18;
volatile unsigned char TXREG @ 0x19;
volatile unsigned char RCREG @ 0x1A;
volatile unsigned char CCPR2L @ 0x1B;
volatile unsigned char CCPR2H @ 0x1C;
volatile unsigned char CCP2CON @ 0x1D;
volatile unsigned char ADRESH @ 0x1E;
volatile unsigned char ADCON0 @ 0x1F;


volatile unsigned char OPTION @ 0x81;
volatile unsigned char TRISA @ 0x85;
volatile unsigned char TRISB @ 0x86;
volatile unsigned char TRISC @ 0x87;

# 63
volatile unsigned char PIE1 @ 0x8C;
volatile unsigned char PIE2 @ 0x8D;
volatile unsigned char PCON @ 0x8E;
volatile unsigned char SSPCON2 @ 0x91;
volatile unsigned char PR2 @ 0x92;
volatile unsigned char SSPADD @ 0x93;
volatile unsigned char SSPSTAT @ 0x94;
volatile unsigned char TXSTA @ 0x98;
volatile unsigned char SPBRG @ 0x99;
volatile unsigned char CMCON @ 0x9C;
volatile unsigned char CVRCON @ 0x9D;
volatile unsigned char ADRESL @ 0x9E;
volatile unsigned char ADCON1 @ 0x9F;


volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;

volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;


volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;


volatile bit IRP @ (unsigned)&STATUS*8+7;
volatile bit RP1 @ (unsigned)&STATUS*8+6;
volatile bit RP0 @ (unsigned)&STATUS*8+5;
volatile bit TO @ (unsigned)&STATUS*8+4;
volatile bit PD @ (unsigned)&STATUS*8+3;
volatile bit ZERO @ (unsigned)&STATUS*8+2;
volatile bit DC @ (unsigned)&STATUS*8+1;
volatile bit CARRY @ (unsigned)&STATUS*8+0;


volatile bit RA5 @ (unsigned)&PORTA*8+5;
volatile bit RA4 @ (unsigned)&PORTA*8+4;
volatile bit RA3 @ (unsigned)&PORTA*8+3;
volatile bit RA2 @ (unsigned)&PORTA*8+2;
volatile bit RA1 @ (unsigned)&PORTA*8+1;
volatile bit RA0 @ (unsigned)&PORTA*8+0;


volatile bit RB7 @ (unsigned)&PORTB*8+7;
volatile bit RB6 @ (unsigned)&PORTB*8+6;
volatile bit RB5 @ (unsigned)&PORTB*8+5;
volatile bit RB4 @ (unsigned)&PORTB*8+4;
volatile bit RB3 @ (unsigned)&PORTB*8+3;
volatile bit RB2 @ (unsigned)&PORTB*8+2;
volatile bit RB1 @ (unsigned)&PORTB*8+1;
volatile bit RB0 @ (unsigned)&PORTB*8+0;


volatile bit RC7 @ (unsigned)&PORTC*8+7;
volatile bit RC6 @ (unsigned)&PORTC*8+6;
volatile bit RC5 @ (unsigned)&PORTC*8+5;
volatile bit RC4 @ (unsigned)&PORTC*8+4;
volatile bit RC3 @ (unsigned)&PORTC*8+3;
volatile bit RC2 @ (unsigned)&PORTC*8+2;
volatile bit RC1 @ (unsigned)&PORTC*8+1;
volatile bit RC0 @ (unsigned)&PORTC*8+0;

# 145
volatile bit GIE @ (unsigned)&INTCON*8+7;
volatile bit PEIE @ (unsigned)&INTCON*8+6;
volatile bit T0IE @ (unsigned)&INTCON*8+5;
volatile bit INTE @ (unsigned)&INTCON*8+4;
volatile bit RBIE @ (unsigned)&INTCON*8+3;
volatile bit T0IF @ (unsigned)&INTCON*8+2;
volatile bit INTF @ (unsigned)&INTCON*8+1;
volatile bit RBIF @ (unsigned)&INTCON*8+0;

volatile bit TMR0IE @ (unsigned)&INTCON*8+5;
volatile bit TMR0IF @ (unsigned)&INTCON*8+2;

# 161
volatile bit ADIF @ (unsigned)&PIR1*8+6;
volatile bit RCIF @ (unsigned)&PIR1*8+5;
volatile bit TXIF @ (unsigned)&PIR1*8+4;
volatile bit SSPIF @ (unsigned)&PIR1*8+3;
volatile bit CCP1IF @ (unsigned)&PIR1*8+2;
volatile bit TMR2IF @ (unsigned)&PIR1*8+1;
volatile bit TMR1IF @ (unsigned)&PIR1*8+0;


volatile bit CMIF @ (unsigned)&PIR2*8+6;
volatile bit EEIF @ (unsigned)&PIR2*8+4;
volatile bit BCLIF @ (unsigned)&PIR2*8+3;
volatile bit CCP2IF @ (unsigned)&PIR2*8+0;


volatile bit T1CKPS1 @ (unsigned)&T1CON*8+5;
volatile bit T1CKPS0 @ (unsigned)&T1CON*8+4;
volatile bit T1OSCEN @ (unsigned)&T1CON*8+3;
volatile bit T1SYNC @ (unsigned)&T1CON*8+2;
volatile bit TMR1CS @ (unsigned)&T1CON*8+1;
volatile bit TMR1ON @ (unsigned)&T1CON*8+0;


volatile bit TOUTPS3 @ (unsigned)&T2CON*8+6;
volatile bit TOUTPS2 @ (unsigned)&T2CON*8+5;
volatile bit TOUTPS1 @ (unsigned)&T2CON*8+4;
volatile bit TOUTPS0 @ (unsigned)&T2CON*8+3;
volatile bit TMR2ON @ (unsigned)&T2CON*8+2;
volatile bit T2CKPS1 @ (unsigned)&T2CON*8+1;
volatile bit T2CKPS0 @ (unsigned)&T2CON*8+0;


volatile bit WCOL @ (unsigned)&SSPCON*8+7;
volatile bit SSPOV @ (unsigned)&SSPCON*8+6;
volatile bit SSPEN @ (unsigned)&SSPCON*8+5;
volatile bit CKP @ (unsigned)&SSPCON*8+4;
volatile bit SSPM3 @ (unsigned)&SSPCON*8+3;
volatile bit SSPM2 @ (unsigned)&SSPCON*8+2;
volatile bit SSPM1 @ (unsigned)&SSPCON*8+1;
volatile bit SSPM0 @ (unsigned)&SSPCON*8+0;


volatile bit CCP1X @ (unsigned)&CCP1CON*8+5;
volatile bit CCP1Y @ (unsigned)&CCP1CON*8+4;
volatile bit CCP1M3 @ (unsigned)&CCP1CON*8+3;
volatile bit CCP1M2 @ (unsigned)&CCP1CON*8+2;
volatile bit CCP1M1 @ (unsigned)&CCP1CON*8+1;
volatile bit CCP1M0 @ (unsigned)&CCP1CON*8+0;


volatile bit SPEN @ (unsigned)&RCSTA*8+7;
volatile bit RX9 @ (unsigned)&RCSTA*8+6;
volatile bit SREN @ (unsigned)&RCSTA*8+5;
volatile bit CREN @ (unsigned)&RCSTA*8+4;
volatile bit ADDEN @ (unsigned)&RCSTA*8+3;
volatile bit FERR @ (unsigned)&RCSTA*8+2;
volatile bit OERR @ (unsigned)&RCSTA*8+1;
volatile bit RX9D @ (unsigned)&RCSTA*8+0;


volatile bit CCP2X @ (unsigned)&CCP2CON*8+5;
volatile bit CCP2Y @ (unsigned)&CCP2CON*8+4;
volatile bit CCP2M3 @ (unsigned)&CCP2CON*8+3;
volatile bit CCP2M2 @ (unsigned)&CCP2CON*8+2;
volatile bit CCP2M1 @ (unsigned)&CCP2CON*8+1;
volatile bit CCP2M0 @ (unsigned)&CCP2CON*8+0;


volatile bit ADCS1 @ (unsigned)&ADCON0*8+7;
volatile bit ADCS0 @ (unsigned)&ADCON0*8+6;
volatile bit CHS2 @ (unsigned)&ADCON0*8+5;
volatile bit CHS1 @ (unsigned)&ADCON0*8+4;
volatile bit CHS0 @ (unsigned)&ADCON0*8+3;
volatile bit ADGO @ (unsigned)&ADCON0*8+2;

volatile bit GODONE @ (unsigned)&ADCON0*8+2;
volatile bit ADON @ (unsigned)&ADCON0*8+0;


volatile bit RBPU @ (unsigned)&OPTION*8+7;
volatile bit INTEDG @ (unsigned)&OPTION*8+6;
volatile bit T0CS @ (unsigned)&OPTION*8+5;
volatile bit T0SE @ (unsigned)&OPTION*8+4;
volatile bit PSA @ (unsigned)&OPTION*8+3;
volatile bit PS2 @ (unsigned)&OPTION*8+2;
volatile bit PS1 @ (unsigned)&OPTION*8+1;
volatile bit PS0 @ (unsigned)&OPTION*8+0;


volatile bit TRISA5 @ (unsigned)&TRISA*8+5;
volatile bit TRISA4 @ (unsigned)&TRISA*8+4;
volatile bit TRISA3 @ (unsigned)&TRISA*8+3;
volatile bit TRISA2 @ (unsigned)&TRISA*8+2;
volatile bit TRISA1 @ (unsigned)&TRISA*8+1;
volatile bit TRISA0 @ (unsigned)&TRISA*8+0;


volatile bit TRISB7 @ (unsigned)&TRISB*8+7;
volatile bit TRISB6 @ (unsigned)&TRISB*8+6;
volatile bit TRISB5 @ (unsigned)&TRISB*8+5;
volatile bit TRISB4 @ (unsigned)&TRISB*8+4;
volatile bit TRISB3 @ (unsigned)&TRISB*8+3;
volatile bit TRISB2 @ (unsigned)&TRISB*8+2;
volatile bit TRISB1 @ (unsigned)&TRISB*8+1;
volatile bit TRISB0 @ (unsigned)&TRISB*8+0;


volatile bit TRISC7 @ (unsigned)&TRISC*8+7;
volatile bit TRISC6 @ (unsigned)&TRISC*8+6;
volatile bit TRISC5 @ (unsigned)&TRISC*8+5;
volatile bit TRISC4 @ (unsigned)&TRISC*8+4;
volatile bit TRISC3 @ (unsigned)&TRISC*8+3;
volatile bit TRISC2 @ (unsigned)&TRISC*8+2;
volatile bit TRISC1 @ (unsigned)&TRISC*8+1;
volatile bit TRISC0 @ (unsigned)&TRISC*8+0;

# 303
volatile bit ADIE @ (unsigned)&PIE1*8+6;
volatile bit RCIE @ (unsigned)&PIE1*8+5;
volatile bit TXIE @ (unsigned)&PIE1*8+4;
volatile bit SSPIE @ (unsigned)&PIE1*8+3;
volatile bit CCP1IE @ (unsigned)&PIE1*8+2;
volatile bit TMR2IE @ (unsigned)&PIE1*8+1;
volatile bit TMR1IE @ (unsigned)&PIE1*8+0;


volatile bit CMIE @ (unsigned)&PIE2*8+6;
volatile bit EEIE @ (unsigned)&PIE2*8+4;
volatile bit BCLIE @ (unsigned)&PIE2*8+3;
volatile bit CCP2IE @ (unsigned)&PIE2*8+0;


volatile bit POR @ (unsigned)&PCON*8+1;
volatile bit BOR @ (unsigned)&PCON*8+0;


volatile bit GCEN @ (unsigned)&SSPCON2*8+7;
volatile bit ACKSTAT @ (unsigned)&SSPCON2*8+6;
volatile bit ACKDT @ (unsigned)&SSPCON2*8+5;
volatile bit ACKEN @ (unsigned)&SSPCON2*8+4;
volatile bit RCEN @ (unsigned)&SSPCON2*8+3;
volatile bit PEN @ (unsigned)&SSPCON2*8+2;
volatile bit RSEN @ (unsigned)&SSPCON2*8+1;
volatile bit SEN @ (unsigned)&SSPCON2*8+0;


volatile bit SMP @ (unsigned)&SSPSTAT*8+7;
volatile bit CKE @ (unsigned)&SSPSTAT*8+6;
volatile bit DA @ (unsigned)&SSPSTAT*8+5;
volatile bit STOP @ (unsigned)&SSPSTAT*8+4;
volatile bit START @ (unsigned)&SSPSTAT*8+3;
volatile bit RW @ (unsigned)&SSPSTAT*8+2;
volatile bit UA @ (unsigned)&SSPSTAT*8+1;
volatile bit BF @ (unsigned)&SSPSTAT*8+0;

# 352
volatile bit CSRC @ (unsigned)&TXSTA*8+7;
volatile bit TX9 @ (unsigned)&TXSTA*8+6;
volatile bit TXEN @ (unsigned)&TXSTA*8+5;
volatile bit SYNC @ (unsigned)&TXSTA*8+4;
volatile bit BRGH @ (unsigned)&TXSTA*8+2;
volatile bit TRMT @ (unsigned)&TXSTA*8+1;
volatile bit TX9D @ (unsigned)&TXSTA*8+0;


volatile bit C2OUT @ (unsigned)&CMCON*8+7;
volatile bit C1OUT @ (unsigned)&CMCON*8+6;
volatile bit C2INV @ (unsigned)&CMCON*8+5;
volatile bit C1INV @ (unsigned)&CMCON*8+4;
volatile bit CIS @ (unsigned)&CMCON*8+3;
volatile bit CM2 @ (unsigned)&CMCON*8+2;
volatile bit CM1 @ (unsigned)&CMCON*8+1;
volatile bit CM0 @ (unsigned)&CMCON*8+0;


volatile bit CVREN @ (unsigned)&CVRCON*8+7;
volatile bit CVROE @ (unsigned)&CVRCON*8+6;
volatile bit CVRR @ (unsigned)&CVRCON*8+5;
volatile bit CVR3 @ (unsigned)&CVRCON*8+3;
volatile bit CVR2 @ (unsigned)&CVRCON*8+2;
volatile bit CVR1 @ (unsigned)&CVRCON*8+1;
volatile bit CVR0 @ (unsigned)&CVRCON*8+0;


volatile bit ADFM @ (unsigned)&ADCON1*8+7;
volatile bit ADCS2 @ (unsigned)&ADCON1*8+6;
volatile bit PCFG3 @ (unsigned)&ADCON1*8+3;
volatile bit PCFG2 @ (unsigned)&ADCON1*8+2;
volatile bit PCFG1 @ (unsigned)&ADCON1*8+1;
volatile bit PCFG0 @ (unsigned)&ADCON1*8+0;


volatile bit EEPGD @ (unsigned)&EECON1*8+7;
volatile bit WRERR @ (unsigned)&EECON1*8+3;
volatile bit WREN @ (unsigned)&EECON1*8+2;
volatile bit WR @ (unsigned)&EECON1*8+1;
volatile bit RD @ (unsigned)&EECON1*8+0;


# 503 "C:\Program Files\HI-TECH Software\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 556
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files\HI-TECH Software\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);


# 629 "C:\Program Files\HI-TECH Software\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 26 "C:\Users\Phang\Desktop\9.80\PR 29\uart_io.h"
void uart_init(unsigned char channel);

void uart_write(unsigned char channel,unsigned char data);

unsigned char uart_read(unsigned char channel);

# 5 "C:\Users\Phang\Desktop\9.80\PR 29\PR29.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3F32");

# 28
void send_config(unsigned char data);
void delay(unsigned long data);
void send_char(unsigned char data);
void lcd_goto(unsigned char data);
void lcd_clr(void);
void send_string(const char *s) ;
void uart_send(unsigned char data);
void send_cmd(unsigned char CMD, unsigned char P1, unsigned char P2, unsigned char P3);
unsigned char uart_receive(void);
void mode(unsigned char data);
void display_status(unsigned char type, unsigned char data0, unsigned char data);
void receive_reply(void);
void receive_reply_nodisplay(void);
void setting_repeat(void);
void CheckAdmin(void);
void AddNew(unsigned char data);
void store_eeprom(unsigned char data,unsigned char location);
unsigned char get_eeprom(unsigned char location);
void view_attendance (void);
void init_attendance(void);
void clear_attendance(void);
void upload_HT(void);
void upload_GUI(void);
void allign(void);
void ResetAdmin(void);


bit mode_enter=0;
bit location_enter;
bit error;
bit usertype_enter=0;
bit admin;
bit day_enter=0;
bit GUIcontrol=0;
bit export_select=0;
unsigned char location=1;
unsigned char day_count=1,day_location;
unsigned char array_resp[8];
unsigned char DAY=1;
unsigned char TEMP;
unsigned char mode_count=1;

void main(void)
{

TRISA = 0b00011100;
TRISB = 0b00000000;
TRISC = 0b10000000;


ADCON1 = 0b10000110;


send_config(0b00000001);
send_config(0b00000010);
send_config(0b00000110);
send_config(0b00001100);
send_config(0b00111000);

RA5=0;
RA1=0;


lcd_clr();
lcd_goto(0);
send_string("Cytron Tech.");
lcd_goto(20);
send_string("PR 29");
delay(200000);
lcd_clr();



SPBRG = 0x40;
BRGH = 1;
TXEN = 1;
CREN = 1;
SPEN = 1;


if((!RA2) && (!RA3))
{
delay(100000);
if((!RA2) && (!RA3))
{
ResetAdmin();
}
}


send_cmd(0x2E,0x00,0x10,0x00);
delay(10);
receive_reply_nodisplay();
send_cmd(0x2d,0x00,1,0x00);
delay(10);
receive_reply_nodisplay();


uart_init(1);


init_attendance();

while(1)
{
while(usertype_enter==0)
{
lcd_goto(0);
send_string("1. Admin login  ");
lcd_goto(20);
send_string("2. User login   ");
if(!RA2)
{
while(!RA2);
CheckAdmin();
if(error!=1)
{
admin = 1;
usertype_enter=1;
}
}
else if (!RA3)
{
while(!RA3);
admin = 0;
usertype_enter=1;
}
}
lcd_clr();


while(mode_enter==0 && admin ==1 && usertype_enter==1)
{
if((!RA2))
{
while((!RA2));
if (mode_count<8)
mode_count++;
else
mode_count=1;
}
else if((!RA3))
{
while((!RA3));
if (mode_count>1)
mode_count--;
else
mode_count=8;
}
else if(!RA4)
{
while(!RA4);
mode_enter=1;
}
lcd_goto(0);
send_string("Mode= ");
lcd_goto(6);
send_char(0x30+mode_count);
lcd_goto(7);
send_string("/8");
lcd_goto(20);
if (mode_count==1) send_string("Set Day         ");
else if (mode_count==2) send_string("Add a New Data  ");
else if (mode_count==3) send_string("Delete a Data   ");
else if (mode_count==4) send_string("Delete All Data ");
else if (mode_count==5) send_string("Change Admin    ");
else if (mode_count==6) send_string("View Attendance ");
else if (mode_count==7) send_string("Clear Attendance");
else if (mode_count==8) send_string("Export          ");
}

while(mode_enter==0 && admin ==0 && usertype_enter==1)
{
while(1)
{
lcd_goto(0);
send_string("Today is Day ");
lcd_goto(13);
DAY=get_eeprom(0xff);
send_char(0x30+DAY);
lcd_goto(20);
send_string("Press 3 to mark ");
if(!RA4)
{
while(!RA4);

send_cmd(0x0c,0x00,0x00,0x00);
lcd_clr();
lcd_goto(0);
send_string("Place your thumb");
lcd_goto(20);
send_string("on the window");
delay(100);
receive_reply();

if(!error)
{
if(DAY==1)
{ day_location=0x00;
store_eeprom(0x2f,day_location+3+array_resp[3]);
delay(100);
}
else if(DAY==2)
{ day_location=0x10;
store_eeprom(0x2f,day_location+3+array_resp[3]);
delay(100);
}
else if(DAY==3)
{ day_location=0x20;
store_eeprom(0x2f,day_location+3+array_resp[3]);
delay(100);
}
else if(DAY==4)
{ day_location=0x30;
store_eeprom(0x2f,day_location+3+array_resp[3]);
delay(100);
}
else if(DAY==5)
{ day_location=0x40;
store_eeprom(0x2f,day_location+3+array_resp[3]);
delay(100);
}

}

}
}

}
lcd_clr();
mode(mode_count);
delay(10);


}

}

# 270
void send_config(unsigned char data)
{
RC4=0;
PORTB=data;
RC5=1;
delay(50);
RC5=0;
delay(50);
}


void delay(unsigned long data)
{
for( ;data>0;data--);
}


void send_char(unsigned char data)
{
RC4=1;
PORTB=data;
RC5=1;
delay(10);
RC5=0;
delay(10);
}


void lcd_goto(unsigned char data)
{
if(data<16)
{
send_config(0x80+data);
}
else
{
data=data-20;
send_config(0xc0+data);
}
}


void lcd_clr(void)
{
send_config(0x01);
delay(600);
}


void send_string(const char *s)
{
unsigned char i=0;
while (s && *s)send_char (*s++);

}


void uart_send(unsigned char data)
{
while(TXIF==0);
TXREG=data;
}


void send_cmd(unsigned char CMD, unsigned char P1, unsigned char P2, unsigned char P3)
{
unsigned char CHK;
CHK = CMD^P1^P2^P3^0x00;
uart_send(0xF5);
uart_send(CMD);
uart_send(P1);
uart_send(P2);
uart_send(P3);
uart_send(0x00);
uart_send(CHK);
uart_send(0xF5);
}


unsigned char uart_receive(void)
{
unsigned char rec_data;
while(RCIF==0);
rec_data=RCREG;
return rec_data;
}


void mode(unsigned char data)
{

if (data==1)
{

while(!day_enter)
{
if(!RA2)
{
while(!RA2);
if (day_count<5)
day_count++;
else
day_count=1;
}
else if(!RA3)
{
while(!RA3);
if (day_count>1)
day_count--;
else
day_count=5;
}
else if(!RA4)
{
lcd_clr();
RA1=1;
while(!RA4);
if(day_count==1)
{ store_eeprom(day_count,0xff);

}
else if (day_count==2)
{ store_eeprom(day_count,0xff);

}
else if (day_count==3)
{ store_eeprom(day_count,0xff);

}
else if (day_count==4)
{ store_eeprom(day_count,0xff);

}
else if (day_count==5)
{ store_eeprom(day_count,0xff);

}
lcd_goto(0);
send_string("Day ");
lcd_goto(4);
send_char(0x30 + day_count);
lcd_goto(20);
send_string("Selected");
delay(200000);
RA1=0;
day_enter=1;
}
lcd_goto(0);
send_string("Today is Day ");
lcd_goto(13);
send_char(0x30+day_count);
lcd_goto(14);
send_string("/5");
lcd_goto(20);
send_string("Press 3 to set  ");
}
day_enter=0;
}
else if (data==2)
{
delay(10000);

while(location_enter==0)
{
lcd_goto(0);
send_string("Choose User     ");
lcd_goto(20);
send_string("User ");
lcd_goto(25);
send_char(0x30 + location);
if(!RA2)
{
while(!RA2);
if (location<5)
location++;
else
location=1;
}
else if(!RA3)
{
while(!RA3);
if (location>1)
location--;
else
location=5;
}
else if(!RA4)
{
while(!RA4);
AddNew(location);
}
}
}
else if (data==3)
{
delay(10000);

while(location_enter==0)
{
lcd_goto(0);
send_string("Choose User     ");
lcd_goto(20);
send_string("User ");
lcd_goto(25);
send_char(0x30 + location);
if(!RA2)
{
while(!RA2);
if (location<5)
location++;
else
location=1;
}
else if(!RA3)
{
while(!RA3);
if (location>1)
location--;
else
location=5;
}
else if(!RA4)
{
while(!RA4);
send_cmd(0x04,0x00,location,0x03);
delay(10);
receive_reply();
location_enter=1;
}
}
}
else if (data==4)
{
send_cmd(0x05,0x00,location,0x03);
delay(10);
receive_reply();
if(error!=1)
{

do{
lcd_goto(0);
send_string("New Admin Needed");
delay(200000);
lcd_goto(0);
send_string("New Admin       ");
lcd_goto(20);
send_string("Standby         ");
delay(200000);
AddNew(0xFF);
}while(error==1) ;
}


}

else if(data==5)
{
lcd_goto(0);
send_string("Verification of ");
lcd_goto(20);
send_string("Formal Admin    ") ;
delay(200000);
CheckAdmin();
if(error==0)
{
lcd_goto(0);
send_string("Deleting...");
delay(50000);
send_cmd(0x04,0x00,0xFF,0x00);
receive_reply();
do{
lcd_goto(0);
send_string("New Admin       ");
lcd_goto(20);
send_string("Standby         ");
delay(200000);
AddNew(0xFF);
}while(error==1) ;
}
}
else if(data==6)
{
view_attendance();
}
else if(data==7)
{
RA1=1;
clear_attendance();
lcd_goto(0);
send_string("Attendance      ");
lcd_goto(20);
send_string("Cleared         ");
delay(200000);
RA1=0;
}
else if(data==8)
{

while(export_select==0)
{
lcd_goto(0);
send_string("1. Export to GUI");
lcd_goto(20);
send_string("2. Export to HT ");
if(!RA2)
{
while(!RA2);
lcd_clr();
lcd_goto(0);
send_string("Uploading...    ");
RA0=1;
delay(150000);
upload_GUI();
lcd_goto(20);
send_string("Done            ");
delay(100000);
RA0=0;
export_select=1;

}
if(!RA3)
{
while(!RA3);
lcd_clr();
lcd_goto(0);
send_string("Uploading...    ");
RA0=1;
delay(150000);
upload_HT();
lcd_goto(20);
send_string("Done            ");
delay(100000);
RA0=0;
export_select=1;

}
}
export_select=0;
}
mode_enter=0;
location_enter=0;
error=0;
}


void display_status(unsigned char type, unsigned char data0, unsigned char data)
{
lcd_clr();
switch(data)
{
case 0x00: RA1=1;
if((type != 1) && (type != 2))
{ lcd_goto(20);
send_string("Successful      ");
}
else if (type ==1)
{
lcd_goto(0);
send_string("Scanning...     ");
lcd_goto(20);
send_string("Verification 1/2");
}
else if (type ==2)
{
lcd_goto(0);
send_string("Scanning...     ");
lcd_goto(20);
send_string("Verification 2/2");
}
delay(200000);
RA1=0;
error=0;
lcd_clr();
break;

case 0X01: RA0=1;
RA5=1;
lcd_goto(20);
send_string("Failed");
delay(200000);
RA5=0;
RA0=0;
error=1;
lcd_clr();
break;

case 0x08: RA0=1;
RA5=1;
lcd_goto(20);
send_string("Timeout");
delay(200000);
RA5=0;
RA0=0;
error=1;
lcd_clr();
break;

case 0x07: RA0=1;
RA5=1;
lcd_goto(20);
send_string("User Exist");
delay(200000);
RA5=0;
RA0=0;
error=1;
lcd_clr();
break;

case 0x05: RA0=1;
RA5=1;
lcd_goto(20);
send_string("Access Denied");
delay(200000);
RA5=0;
RA0=0;
error=1;
lcd_clr();
break;

case 0x03: RA1=1;
if(data0!=0xFF)
{
lcd_goto(0);
send_string("Hello User ");
lcd_goto(11);
send_char(0x30 + data0);
lcd_goto(20);
send_string("Welcome");
error=0;
}
else
{
lcd_goto(0);
send_string("Hello Admin");
}
delay(200000);
RA1=0;
lcd_clr();
break;


default: RA0=1;
RA1=1;
RA5=1;
lcd_goto(20);
send_string("Error");
delay(200000);
RA5=0;
RA0=0;
RA1=0;
error=1;
lcd_clr();
break;

}
}


void receive_reply(void)
{

unsigned char i;
for(i=0;i<8;i++)
array_resp[i]=uart_receive();
display_status(array_resp[1],array_resp[3],array_resp[4]);
delay(1000);

}


void receive_reply_nodisplay(void)
{
unsigned char i;
for(i=0;i<8;i++)
array_resp[i]=uart_receive();
}


void CheckAdmin(void)
{
send_cmd(0x0b,0x00,0xFF,0x00);
lcd_goto(0);
send_string("Place your thumb");
lcd_goto(20);
send_string("on the window");
delay(100);
receive_reply();
}


void AddNew(unsigned char data)
{
send_cmd(0x01,0x00,data,0x03);
lcd_goto(0);
send_string("Place your thumb");
lcd_goto(20);
send_string("on the window");
delay(5000);
receive_reply();
location_enter=1;
if(!error)
{
lcd_clr();
lcd_goto(0);
send_string("Scanning...     ");
lcd_goto(20);
send_string("Verification 1/2");
send_cmd(0x02,0x00,data,0x03);
receive_reply();
if(!error)
{
lcd_clr();
lcd_goto(0);
send_string("Scanning...     ");
lcd_goto(20);
send_string("Verification 2/2");
send_cmd(0x03,0x00,data,0x03);
receive_reply();
}

}

}


void store_eeprom(unsigned char data,unsigned char location)
{
do{ while(WR)continue;EEADR=(location);EEDATA=(data); EECON1&=0x3F;CARRY=0;if(GIE)CARRY=1;GIE=0; WREN=1;EECON2=0x55;EECON2=0xAA;WR=1;WREN=0; if(CARRY)GIE=1; }while(0);
while(WR)
continue;
}


unsigned char get_eeprom(unsigned char location)
{
unsigned char value;
value= ((EEADR=(location)),(EECON1&=0x3F),(RD=1),EEDATA);
return value;
}


void view_attendance (void)
{
lcd_clr();
lcd_goto(0);
send_string("User 1 2 3 4 5 ");
lcd_goto(20);
unsigned char x;
for(x=0; x<4; x++)
{ TEMP=get_eeprom(x);
send_char(TEMP);
}
for(x=4; x<9; x++)
{ send_char(0x20);
TEMP=get_eeprom(x);
send_char(TEMP);
}
delay(300000);
lcd_goto(20);
for(x=16; x<20; x++)
{ TEMP=get_eeprom(x);
send_char(TEMP);
}
for(x=20; x<25; x++)
{ send_char(0x20);
TEMP=get_eeprom(x);
send_char(TEMP);
}
delay(300000);
lcd_goto(20);
for(x=32; x<36; x++)
{ TEMP=get_eeprom(x);
send_char(TEMP);
}
for(x=36; x<41; x++)
{ send_char(0x20);
TEMP=get_eeprom(x);
send_char(TEMP);
}
delay(300000);
lcd_goto(20);
for(x=48; x<52; x++)
{ TEMP=get_eeprom(x);
send_char(TEMP);
}
for(x=52; x<57; x++)
{ send_char(0x20);
TEMP=get_eeprom(x);
send_char(TEMP);
}
delay(300000);
lcd_goto(20);
for(x=64; x<68; x++)
{ TEMP=get_eeprom(x);
send_char(TEMP);
}
for(x=68; x<73; x++)
{ send_char(0x20);
TEMP=get_eeprom(x);
send_char(TEMP);
}
delay(300000);

}


void init_attendance(void)
{
day_location=0x00;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('1',day_location+3);

day_location=0x10;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('2',day_location+3);

day_location=0x20;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('3',day_location+3);

day_location=0x30;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('4',day_location+3);

day_location=0x40;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('5',day_location+3);

}

void clear_attendance(void)
{
day_location=0x00;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('1',day_location+3);
store_eeprom(0xff,day_location+4);
store_eeprom(0xff,day_location+5);
store_eeprom(0xff,day_location+6);
store_eeprom(0xff,day_location+7);
store_eeprom(0xff,day_location+8);
day_location=0x10;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('2',day_location+3);
store_eeprom(0xff,day_location+4);
store_eeprom(0xff,day_location+5);
store_eeprom(0xff,day_location+6);
store_eeprom(0xff,day_location+7);
store_eeprom(0xff,day_location+8);
day_location=0x20;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('3',day_location+3);
store_eeprom(0xff,day_location+4);
store_eeprom(0xff,day_location+5);
store_eeprom(0xff,day_location+6);
store_eeprom(0xff,day_location+7);
store_eeprom(0xff,day_location+8);
day_location=0x30;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('4',day_location+3);
store_eeprom(0xff,day_location+4);
store_eeprom(0xff,day_location+5);
store_eeprom(0xff,day_location+6);
store_eeprom(0xff,day_location+7);
store_eeprom(0xff,day_location+8);
day_location=0x40;
store_eeprom('D',day_location);
store_eeprom('A',day_location+1);
store_eeprom('Y',day_location+2);
store_eeprom('5',day_location+3);
store_eeprom(0xff,day_location+4);
store_eeprom(0xff,day_location+5);
store_eeprom(0xff,day_location+6);
store_eeprom(0xff,day_location+7);
store_eeprom(0xff,day_location+8);
}


void upload_HT(void)
{
unsigned char address;
unsigned char count;
unsigned char array_title[40]= {"+-+-+- Attendance List -+-+- Cytron PR29"};

for(count=0;count<40;count++)
uart_write(2,array_title[count]);
for(count=0;count<20;count++)
{ uart_write(2,'+');
uart_write(2,'-');
}
for(count=0;count<80;count++)
uart_write(2,' ');
uart_write(2,'U');
uart_write(2,'s');
uart_write(2,'e');
uart_write(2,'r');
for(count=1;count<6;count++)
{
uart_write(2,' ');
uart_write(2,0x30+count);
}
allign();

address=0x00;
count=address;
for(address;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
uart_write(2,' ');
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}
allign();

address=0x10;
count=address;
for(count;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
uart_write(2,' ');
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}
allign();

address=0x20;
count=address;
for(count;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
uart_write(2,' ');
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}
allign();

address=0x30;
count=address;
for(count;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
uart_write(2,' ');
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}
allign();

address=0x40;
count=address;
for(count;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
uart_write(2,0xff);
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}
allign();
for(count=0;count<80;count++)
uart_write(2,' ');
for(count=0;count<40;count++)
{ uart_write(2,'+');
uart_write(2,'-');

}
}


void upload_GUI(void)
{
unsigned char address;
unsigned char count;

address=0x00;
count=address;
for(address;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}

address=0x10;
count=address;
for(count;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}

address=0x20;
count=address;
for(count;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}

address=0x30;
count=address;
for(count;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}

address=0x40;
count=address;
for(count;count<=address+3;count++)
{
TEMP=get_eeprom(count);
uart_write(2,TEMP);
}
address=count;
for(count;count<=address+4;count++)
{
TEMP=get_eeprom(count);
if(TEMP==0xff) TEMP=0x30;
uart_write(2,TEMP);
}

}


void allign(void)
{
unsigned char Allign;
for(Allign=0;Allign<66;Allign++)
uart_write(2,' ');
}


void ResetAdmin(void)
{
lcd_goto(0);
send_string("Resetting Admin...");
delay(200000);
send_cmd(0x04,0x00,0xFF,0x00);
receive_reply();
lcd_goto(0);
send_string("New Admin Needed");
delay(200000);
do{
lcd_goto(0);
send_string("New Admin       ");
lcd_goto(20);
send_string("Standby");
delay(200000);
AddNew(0xff);
} while(error==1) ;
}
